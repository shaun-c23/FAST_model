-------------------------------------------------------------------------------------------------------------------------------

There are several input files located in the input folder necessary for the model.

-------------------------------------------------------------------------------------------------------------------------------

setup.txt:

#Model Setup File

#Meshtype information:

    1. "static" - static grid of points (computationally inefficient and requires fine mesh in melt pool for accurate radiative heat loss prediction)

    2. "dynamic" - static set of points dynmaically refined around melt pool

    3. "meltpool" - dynamic set of point just in and around the melt pool area

    4. “points” - set of defined points from static_points.txt

    5. “dynamic-points” - add meltpool mesh with static_points (in place of dynamic if you define a static mesh from the static_points.txt file rather than a regular grid from domain.txt file.

Config = inputs/config.txt #path to config file
Material = inputs/materials/Ti64.txt #path to material file located in the materials folder
Domain = inputs/domain.txt #path to domain file
Meltpool = inputs/meltpool_points.txt #path to meltpool calculation points file

#can define up to 6 beams at once
BeamPath1 = gcode/gcodefiles/triangle_laser_pos.txt #path to beam file located in gcode > gcodefiles folder
BeamPath2 = gcode/gcodefiles/empty
BeamPath3 = gcode/gcodefiles/empty
BeamPath4 = gcode/gcodefiles/empty
BeamPath5 = gcode/gcodefiles/empty
BeamPath6 = gcode/gcodefiles/empty

BC = inputs/boundaryconditions.txt #path to boundary condition file
Points = inputs/static_points.txt #path to custom static points
DataPath = data/test/ #path to data folder for output results

Meshtype = dynamic #specifies mesh type (see above for options)

Meltpooldepth = false #specifies if you want to model the melt pool depth (automatically "true" if you set z1 != z2 in the domain.txt file and dont choose "meltpool" as mesh type)

BoundaryConditions = false #false for semi-infinite, true to apply boundary conditions (see boundaryconditions.txt) **only works for single beam with planar symmatric boundary**

StaticPoints = false #set true if you want addition points from static_points with other meshing options (example usage would be if a few thermalcouple positions are wanted in addition to a meltpool or static mesh). Automatically set to true if “points” or “dynamic-points” option is selected

MultiBeamON = false #Set multiple beams on. You can leave the beam path as “empty” or non existing file to decativate a specific beam path. 

-------------------------------------------------------------------------------------------------------------------------------

config.txt:

#Model Setup File

TimeStep = 0.01 #timstep frequency in s
CoolingTime = 0 #extra or time in s to allow to cool beyond time in gcode

PrintNframe = 5; #Every N frame number to save

InitialTemp = 250 #T0 or preheat temperature in ˚C
AmbientTemp = 30 #ambient temperature for radiation in ˚C

Efficiency = 0.72 #beam power absorption efficiency
Sigma = 0.145 #beam spot size in mm
BeamDepth = 0 #beam penetration depth in mm

MaxThreads = 6 #number of CPU cores to run on

-------------------------------------------------------------------------------------------------------------------------------

domain.txt:

# Domain Configuration File
If "meltpool" selected for Meshtype in setup.txt, these values will not matter. Only used for "dynamic" or "static".

# Grid dimensions
nx = 75 #number of nodes in x
ny = 25 #number of nodes in y
nz = 1 #number of nodes in z

# Domain boundaries in mm
x1 = -15 #x lower bound
x2 = -5 #x upper bound
y1 = 3 #y lower bound
y2 = 7 #y upper bound
z1 = 0 #z lower bound
z2 = 0 #z upper bound

-------------------------------------------------------------------------------------------------------------------------------

meltpoolpoints.txt:

#Melt pool calculation point parameters

boxsize = 1 #default box size, can scale up or down to make larger or smaller, size is updated based on previous meltpool but depending on material may need different size
point_space = 0.075 #point spacing for surface
depth_space = 0.025 #point spacing for depth if "true" selected for Meltpooldepth in setup.txt

-------------------------------------------------------------------------------------------------------------------------------

materials>Ti64.txt:

#Material property data for Ti-6Al-4V

ktemps = {35.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 995.0, 1005.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600, 1610, 1620, 1625} #thermal conductivity temperature values in ˚C
    
k = {7.0, 7.45, 8.75, 10.15, 11.35, 12.6, 14.18, 15.47, 17.55, 19.06, 19.41, 19.46, 21, 22.9, 23.7, 24.6, 25.8, 27.06, 27.6, 30.81, 32.8} #thermal conductivity temperature values in mW/mm˚C
    
ctemps = {35, 400, 500, 700, 800, 900, 995, 1005, 1100, 1200, 1300, 1400, 1500, 1600, 1610, 1620, 1625} #specific heat temperature values in ˚C
    
c = {546e6, 629e6, 651e6, 684e6, 691.3e6, 677.4e6, 644.5e6, 642.7e6, 660e6, 678e6, 696e6, 714e6, 732e6, 750.7e6, 758.5e6, 803.2e6, 831e6} #specific heat values in mJ/(tonne ˚C)
    
rho = {4.2e-09} #density for material in tonne/mm³
    
emissivity = {0.7} #emissivity value for material
    
meltT = {1625} #liquidus temperature for material in ˚C

-------------------------------------------------------------------------------------------------------------------------------

boundaryconditions.txt:

#Boundary Conditions File
**NOTE** This is only applicable for symmetric planar geometries (across x and y axes) (e.g. a square) to apply adiabatic BC at the locations specified.

x1 = -20 #boundary for first mirror image
x2 = 30 #boundary for second mirror image
y1 = -20 #boundary for third mirror image
y2 = 30 #boundary for fourth mirror image
zbot = -1 #boundary for bottom of domain

-------------------------------------------------------------------------------------------------------------------------------

static_points.txt

#This is for additional points or custom static meshes if a regular grid mesh is not wanted. Specific geometry can be pre-processed to create a custom set of points. Particularly useful if the layer has lots of empty space in which a regular grid would caluclate at unnecessary locations and slow down computation.

#x,y,z positions of static points. The first element of each array would define point 1, the second element would define point 2, etc.

x = {1,2,3}
y = {4,5,6}
z = {-1,-1,-1}

